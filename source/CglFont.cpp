#include "Cglfont.h"

Cglfont::Cglfont()
{
}

/******************************************************************************

	Loads our font

******************************************************************************/
// Load our font texture
// We used glLoadSpriteSet since the texture was made with my texture packer.
// no need to save the return value since  we don't need  it at all
int Cglfont::Load(glImage *_font_sprite, // pointer to glImage array
				  const unsigned int numframes,  // Texture packer auto-generated #define
				  const unsigned int *texcoords, // Texture packer auto-generated array
				  GL_TEXTURE_TYPE_ENUM type, // texture type for glTexImage2D() in videoGL.h
				  int sizeX, // sizeX for glTexImage2D() in videoGL.h
				  int sizeY, // sizeY for glTexImage2D() in videoGL.h
				  int param, // param for glTexImage2D() in videoGL.h
				  int pallette_width, // Length of the palette (256 colors)
				  const u16 *palette, // Palette Data
				  const uint8 *texture)  // image data generated by GRIT

{
	font_sprite = _font_sprite;

	int textureID =
		glLoadSpriteSet(font_sprite,
						numframes,
						texcoords,
						type,
						sizeX,
						sizeY,
						param,
						pallette_width,
						palette,
						texture);

	return textureID;
}

/******************************************************************************

	Prints a string

******************************************************************************/
void Cglfont::Print(int x, int y, const char *text)
{

	unsigned char font_char;

	while (*text)
	{
		font_char = (*(unsigned char *)text++) - 32;
		glSprite(x, y, GL_FLIP_NONE, &font_sprite[font_char]);
		x += font_sprite[font_char].width;
	}
}

/******************************************************************************

	Prints a number

******************************************************************************/
void Cglfont::Print(int x, int y, int value)
{

	sprintf(str, "%i", value);

	Print(x, y, str);
}

/******************************************************************************

	Center Prints a string

******************************************************************************/
void Cglfont::PrintCentered(int x, int y, const char *text)
{

	unsigned char font_char;
	int total_width = 0;
	char *o_text = (char *)text;

	while (*text)
	{
		font_char = (*(unsigned char *)text++) - 32;
		total_width += font_sprite[font_char].width;
	}

	x = (SCREEN_WIDTH - total_width) / 2;

	text = o_text;
	while (*text)
	{
		font_char = (*(unsigned char *)text++) - 32;
		glSprite(x, y, GL_FLIP_NONE, &font_sprite[font_char]);
		x += font_sprite[font_char].width;
	}
}

/******************************************************************************

	Center Prints a number

******************************************************************************/
void Cglfont::PrintCentered(int x, int y, int value)
{

	sprintf(str, "%i", value);

	PrintCentered(x, y, str);
}